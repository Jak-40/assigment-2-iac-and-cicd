name: Deploy EKS Infrastructure

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

  # Auto trigger on push to main branch
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-infrastructure.yml'

  # Plan on pull requests
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-infrastructure.yml'

env:
  TF_VERSION: 1.13.0
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-west-2' }}
  CENTRAL_BACKEND_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to read repository contents
  pull-requests: write  # Required to comment on PRs

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      has-changes: ${{ steps.plan.outputs.exitcode == '2' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CENTRAL_BACKEND_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC_Plan
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Connection
        run: |
          echo "AWS Connection successful!"
          echo "Account: $(aws sts get-caller-identity --query Account --output text)"
          echo "Region: $(aws configure get region)"
          echo "Role: $(aws sts get-caller-identity --query Arn --output text)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=eks-infrastructure/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Format Check
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -check -diff

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -detailed-exitcode \
            -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
            -var="ci_cd_role_arn=${{ env.CENTRAL_BACKEND_ROLE_ARN }}" \
            -out=tfplan \
            -no-color
        continue-on-error: true
        env:
          TF_LOG: DEBUG

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Plan Artifact
        if: steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 7

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.has-changes == 'true')
    
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CENTRAL_BACKEND_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC_Apply
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Connection
        run: |
          echo "âœ… AWS Connection successful!"
          echo "Account: $(aws sts get-caller-identity --query Account --output text)"
          echo "Region: $(aws configure get region)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=eks-infrastructure/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Output EKS Cluster Info
        working-directory: ./terraform
        run: |
          echo "## EKS Cluster Deployed Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cluster Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster Name:** $(terraform output -raw cluster_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster Endpoint:** $(terraform output -raw cluster_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure kubectl: \`aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $(terraform output -raw cluster_name)\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify cluster: \`kubectl get nodes\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy applications using the separate application workflow" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}-destroy
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CENTRAL_BACKEND_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC_Destroy
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Connection
        run: |
          echo "âœ… AWS Connection successful!"
          echo "Account: $(aws sts get-caller-identity --query Account --output text)"
          echo "Region: $(aws configure get region)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=eks-infrastructure/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan Destroy
        working-directory: ./terraform
        run: |
          terraform plan \
            -destroy \
            -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
            -var="ci_cd_role_arn=${{ env.CENTRAL_BACKEND_ROLE_ARN }}" \
            -out=tfplan-destroy

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan-destroy

      - name: Destroy Summary
        run: |
          echo "## Infrastructure Destroyed ðŸ’¥" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Destroyed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
